using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Space
{
    //Enumerador que especifica o tipo do inimigo.

    class Sprite
    {
        #region Variaveis de comportamento
        public Vector2 posicao;

        public int largura;

        public int altura;

        public int corInimigo;

        private Texture2D imagemSprite;

        public int frameAtual { get; set; }

        #endregion

        #region Construtores

        //Construtor sprite sem animação.
        public Sprite(Texture2D imagemPersonagem, Vector2 posicao)
        {
            this.imagemSprite = imagemPersonagem;
            this.posicao = posicao; //primeira variavel posição é a variavel da classe, a segunda, a do construtor.
            this.altura = this.imagemSprite.Height;
            this.largura = this.imagemSprite.Width;
        }

        //Sobrecarga do construtor para sprites animados.
        public Sprite(Texture2D imagemPersonagem, Vector2 posicao, 
            int frameatual)
        {
            this.imagemSprite = imagemPersonagem;
            this.posicao = posicao;
            this.frameAtual = frameatual;
            this.altura = this.imagemSprite.Height;
            this.largura = this.imagemSprite.Width;
        }

        public Sprite(Texture2D imagemPersonagem, Vector2 posicao, 
            int frameatual, int corInimigo)
        {
            this.imagemSprite = imagemPersonagem;
            this.posicao = posicao;
            this.frameAtual = frameatual;
            this.altura = this.imagemSprite.Height;
            this.largura = this.imagemSprite.Width;
            this.corInimigo = corInimigo;
        }

        #endregion

        #region Metodos desenhar
        // Sprites sem animação. 
        public void Desenhar(SpriteBatch spritebatch)
        {
            
            spritebatch.Draw(this.imagemSprite, this.posicao, Color.White);
        }
        //Sobrecarda do método desenhar para animações
        public void Desenhar(SpriteBatch spritebatch, Rectangle retangulo)
        {
            spritebatch.Draw(this.imagemSprite, this.posicao, retangulo, Color.White);
        }

        public void DesenharInimigo(SpriteBatch spritebatch, Rectangle retangulo)
        {
            if (corInimigo == 0) { spritebatch.Draw(this.imagemSprite, this.posicao, retangulo, Color.White); }
            if (corInimigo == 1) { spritebatch.Draw(this.imagemSprite, this.posicao, retangulo, Color.Yellow); }
            if (corInimigo == 2) { spritebatch.Draw(this.imagemSprite, this.posicao, retangulo, Color.Green); }
            if (corInimigo == 3) { spritebatch.Draw(this.imagemSprite, this.posicao, retangulo, Color.Pink); }
            if (corInimigo == 4) { spritebatch.Draw(this.imagemSprite, this.posicao, retangulo, Color.OrangeRed); }
            if (corInimigo == 5) { spritebatch.Draw(this.imagemSprite, this.posicao, retangulo, Color.Gray); }
        }
        #endregion

        #region Metodos detecta colisao
        //Metodos para detectar colisão
        public bool DetectaColisao(Sprite sprite)
        {
            return (this.posicao.X + this.imagemSprite.Width / 2 > sprite.posicao.X &&
                this.posicao.X < sprite.posicao.X + sprite.imagemSprite.Width / 2 &&
                this.posicao.Y + this.imagemSprite.Height > sprite.posicao.Y &&
                this.posicao.Y < sprite.posicao.Y + sprite.imagemSprite.Width);
        }

        public bool DetectaColisaoNave(Sprite sprite)
        {
            return (this.posicao.X + this.imagemSprite.Width > sprite.posicao.X &&
                this.posicao.X < sprite.posicao.X + sprite.imagemSprite.Width &&
                this.posicao.Y + this.imagemSprite.Height > sprite.posicao.Y &&
                this.posicao.Y < sprite.posicao.Y + sprite.imagemSprite.Width);
        }
        #endregion
    }
}
